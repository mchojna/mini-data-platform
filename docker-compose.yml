name: "mini-data-platform"

# Default health check configuration
x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 15s
  start_interval: 5s

# Default logging configuration
x-logging: &default-logging
  logging:
    driver: "json-file"
    options:
      max-size: "100m"
      max-file: "5"
      tag: "{{.Name}}/{{.ID}}"
      compress: "true"
      env: "production"

services:
  # PostgreSQL Database Service - handles persistent storage of application data
  postgres:
    image: debezium/postgres:${POSTGRES_VERSION}
    platform: linux/arm64
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: >
      postgres  -c wal_level=logical -c max_wal_senders=10 -c max_replication_slots=10 -c shared_preload_libraries=pgoutput
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 512M
    restart: unless-stopped
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "pg_isready -U postgres"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - logs:/var/log/postgresql
    networks:
      - network
    labels:
      com.mini-data-platform.service: "database"
      com.mini-data-platform.component: "postgres"
    <<: *default-logging

  # Data Initialization Service - runs initial data setup scripts
  data-initializer:
    build:
      context: .
      dockerfile: services/data_initializer/Dockerfile
    container_name: data-initializer
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - initializer_data:/app
      - logs:/var/log/data-initializer
    networks:
      - network

  # Data Generation Service - runs data generation scripts
  data-generator:
    build:
      context: .
      dockerfile: services/data_generator/Dockerfile
    container_name: data-generator
    depends_on:
      postgres:
        condition: service_healthy
      debezium-configurator:
        condition: service_completed_successfully
    volumes:
      - logs:/var/log/data-generator
    networks:
      - network

  # Apache Zookeeper Service - manages Kafka cluster coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION}
    platform: linux/arm64
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 256M
    restart: unless-stopped
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - logs:/var/log/zookeeper
    networks:
      - network
    labels:
      com.mini-data-platform.service: "messaging"
      com.mini-data-platform.component: "zookeeper"
    <<: *default-logging

  # Apache Kafka Service - handles message streaming and event processing
  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    platform: linux/arm64
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_INTERNAL_PORT}:${KAFKA_INTERNAL_PORT}"
      - "${KAFKA_EXTERNAL_PORT}:${KAFKA_EXTERNAL_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_INTERNAL_PORT},PLAINTEXT_HOST://localhost:${KAFKA_EXTERNAL_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G
    restart: unless-stopped
    healthcheck:
      <<: *default-healthcheck
      test:
        [
          "CMD-SHELL",
          "kafka-topics --bootstrap-server localhost:${KAFKA_INTERNAL_PORT} --list || exit 1",
        ]
    volumes:
      - kafka_data:/var/lib/kafka/data
      - logs:/var/log/kafka
    networks:
      - network
    labels:
      com.mini-data-platform.service: "messaging"
      com.mini-data-platform.component: "kafka"
    <<: *default-logging

  # Schema Registry Service - manages Avro schemas for Kafka messages
  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION}
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "${SCHEMA_REGISTRY_PORT}:${SCHEMA_REGISTRY_PORT}"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:${KAFKA_INTERNAL_PORT}
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:${SCHEMA_REGISTRY_PORT}
      SCHEMA_REGISTRY_COMPATIBILITY_LEVEL: "BACKWARD"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 512M
    healthcheck:
      <<: *default-healthcheck
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:${SCHEMA_REGISTRY_PORT} || exit 1",
        ]
    networks:
      - network
    volumes:
      - logs:/var/log/schema-registry
    labels:
      com.mini-data-platform.service: "messaging"
      com.mini-data-platform.component: "schema-registry"
    <<: *default-logging

  # Kafka Connect with Debezium - handles CDC (Change Data Capture) from PostgreSQL to Kafka
  kafka-connector:
    image: quay.io/debezium/connect:${DEBEZIUM_VERSION}
    platform: linux/arm64
    container_name: kafka-connector
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "${KAFKA_CONNECT_PORT}:${KAFKA_CONNECT_PORT}"
    environment:
      BOOTSTRAP_SERVERS: kafka:${KAFKA_INTERNAL_PORT}
      GROUP_ID: kafka-connector
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:${SCHEMA_REGISTRY_PORT}
      VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:${SCHEMA_REGISTRY_PORT}
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:${SCHEMA_REGISTRY_PORT}
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:${SCHEMA_REGISTRY_PORT}
      KAFKA_CONNECT_PLUGINS_DIR: /kafka/connect/
    restart: unless-stopped
    healthcheck:
      <<: *default-healthcheck
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:${KAFKA_CONNECT_PORT}/ || exit 1",
        ]
    networks:
      - network
    volumes:
      - ./config/debezium/confluentinc-kafka-connect-avro-converter-7.9.0/lib:/kafka/connect/libs
      - logs:/var/log/kafka-connect
    labels:
      com.mini-data-platform.service: "connecting"
      com.mini-data-platform.component: "kafka-connector"
    <<: *default-logging

  # Debezium Configuration Service - sets up Debezium connectors for CDC
  debezium-configurator:
    build:
      context: .
      dockerfile: services/debezium_configurator/Dockerfile
    container_name: debezium-configurator
    depends_on:
      postgres:
        condition: service_healthy
      kafka-connector:
        condition: service_healthy
    networks:
      - network

  # Kafka Consumer Service - processes messages from Kafka topics
  kafka-consumer:
    build:
      context: .
      dockerfile: services/kafka_consumer/Dockerfile
    container_name: kafka-consumer
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      debezium-configurator:
        condition: service_completed_successfully
      kafka-connector:
        condition: service_healthy
    networks:
      - network

  # Spark Master Node - manages Spark cluster and job distribution
  spark-master:
    image: bitnami/spark:${SPARK_VERSION}
    platform: linux/arm64
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "${SPARK_MASTER_WEBUI_PORT}:${SPARK_MASTER_WEBUI_PORT}"
      - "${SPARK_MASTER_PORT}:${SPARK_MASTER_PORT}"
    networks:
      - network
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4G
        reservations:
          cpus: "1"
          memory: 2G
    restart: unless-stopped
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:${SPARK_MASTER_WEBUI_PORT}"]
    volumes:
      - logs:/var/log/spark-master
    labels:
      com.mini-data-platform.service: "processing"
      com.mini-data-platform.component: "spark-master"
    <<: *default-logging

  # Spark Worker Node - executes Spark tasks and processing
  spark-worker:
    image: bitnami/spark:${SPARK_VERSION}
    platform: linux/arm64
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:${SPARK_MASTER_PORT}
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY}
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_LOCAL_IP=spark-worker
      - SPARK_PUBLIC_DNS=spark-worker
      - SPARK_WORKER_WEBUI_PORT=${SPARK_WORKER_WEBUI_PORT}
    ports:
      - "${SPARK_WORKER_WEBUI_PORT}:${SPARK_WORKER_WEBUI_PORT}"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4G
    restart: unless-stopped
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:${SPARK_WORKER_WEBUI_PORT}"]
    volumes:
      - logs:/var/log/spark-worker
    networks:
      - network
    labels:
      com.mini-data-platform.service: "processing"
      com.mini-data-platform.component: "spark-worker"
    <<: *default-logging

  # Spark Processing Service - handles data processing and transformation
  spark-processor:
    build:
      context: .
      dockerfile: services/spark_processor/Dockerfile
    container_name: spark-processor
    ports:
      - "${SPARK_PROCESSOR_PORT}:${SPARK_PROCESSOR_PORT}"
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:${KAFKA_INTERNAL_PORT}
      - SPARK_MASTER_URL=spark://spark-master:${SPARK_MASTER_PORT}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_ENDPOINT=http://minio:${MINIO_API_PORT}
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G
    restart: unless-stopped
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:${SPARK_PROCESSOR_PORT}"]
    volumes:
      - logs:/var/log/spark-processor
    networks:
      - network
    labels:
      com.mini-data-platform.service: "processing"
      com.mini-data-platform.component: "spark-processor"
    <<: *default-logging

  # MinIO Object Storage - S3-compatible storage for processed data
  minio:
    image: bitnami/minio:${MINIO_VERSION}
    container_name: minio
    ports:
      - "${MINIO_API_PORT}:${MINIO_API_PORT}"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_FORCE_NEW_KEYS: "no"
      BITNAMI_UID: ${MINIO_USER_ID}
      BITNAMI_GID: ${MINIO_GROUP_ID}
    entrypoint: /bin/sh
    command: -c "chown -R ${MINIO_USER_ID}:${MINIO_USER_ID} /bitnami/minio/data && chmod -R u+rxw /bitnami/minio/data && minio server /data --console-address ':${MINIO_CONSOLE_PORT}' --address ':${MINIO_API_PORT}'" #-c "chown -R ${MINIO_USER_ID}:${MINIO_USER_ID} /bitnami/minio/data && chmod -R u+rxw /bitnami/minio/data && minio server --console-address ':${MINIO_API_PORT}' /data"
    user: "0:0"
    healthcheck:
      <<: *default-healthcheck
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${MINIO_API_PORT}/minio/health/live",
        ]
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G
    restart: unless-stopped
    volumes:
      - minio_data:/bitnami/minio/data
      - logs:/var/log/minio
    networks:
      - network
    labels:
      com.mini-data-platform.service: "storage"
      com.mini-data-platform.component: "minio"
    <<: *default-logging

# Network Configuration
networks:
  network:
    name: network
    driver: bridge
    labels:
      com.mini-data-platform.network: "main"

# Volume Configuration
volumes:
  # PostgreSQL data storage
  postgres_data:
    name: postgres-data

  # Data initializer storage
  initializer_data:
    name: initializer-data

  # Kafka data storage
  kafka_data:
    name: kafka-data

  # ZooKeeper data storage
  zookeeper_data:
    name: zookeeper-data

  # MinIO data storage
  minio_data:
    name: minio-data

  # Centralized logging volume
  logs:
    name: logs
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs
      o: bind
